#!/usr/bin/env bash
#
# Use wofi/zenity to change system runstate thanks to systemd.
#
# Note: this currently relies on associative array support in the shell.
#
# Inspired from i3pystatus wiki:
# https://github.com/enkore/i3pystatus/wiki/Shutdown-Menu
#
# Copyright 2015 Benjamin Chrétien <chretien at lirmm dot fr>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# modified to work with latest wofi update by joekamprad <joekamprad@endeavouros.com>

#######################################################################
#                            BEGIN CONFIG                             #
#######################################################################

# Use a custom lock script
#LOCKSCRIPT="i3lock-extra -m pixelize"

# Colors: FG (foreground), BG (background), HL (highlighted)
FG_COLOR="#bbbbbb"
BG_COLOR="#111111"
HLFG_COLOR="#111111"
HLBG_COLOR="#bbbbbb"
BORDER_COLOR="#222222"

# Options not related to colors (most wofi options do not work anymore)
WOFI_OPTIONS=(-theme ~/.config/wofi/powermenu.rasi)

#######################################################################
#                             END CONFIG                              #
#######################################################################

# Whether to ask for user's confirmation
enable_confirmation=false

# Preferred launcher if both are available
preferred_launcher="wofi"


# Check whether the user-defined launcher is valid
launcher_list=(wofi)


# Check whether a command exists
function command_exists() {
  command -v "$1" &> /dev/null 2>&1
}

# systemctl required
if ! command_exists systemctl ; then
  exit 1
fi

# menu defined as an associative array
typeset -A menu

# Menu with keys/commands

menu=(
  [   Shutdown]="systemctl poweroff"
  [   Reboot]="systemctl reboot"
  [   Suspend]="systemctl suspend"
  [   Hibernate]="systemctl hibernate"
  [   Lock]="~/.config/i3/scripts/blur-lock"
  [   Logout]="swaymsg exit"
  [   Cancel]=""
  []=""
)

menu_nrows=${#menu[@]}

# Menu entries that may trigger a confirmation message
menu_confirm="Shutdown Reboot Hibernate Suspend Halt Logout"

launcher_exe=""
launcher_options=""

function prepare_launcher() {
    launcher_exe="wofi"
    launcher_options=(--show dmenu --location 1 --width 250 --height 400 \
    -lines "${menu_nrows}" -p "${WOFI_TEXT}" "${wofi_colors}" "${WOFI_OPTIONS[@]}")
}

for l in "${launcher_list[@]}"; do
  if command_exists "${l}" ; then
    prepare_launcher "${l}"
    break
  fi
done

# No launcher available
if [[ -z "${launcher_exe}" ]]; then
  exit 1
fi

launcher=(${launcher_exe} "${launcher_options[@]}")
selection="$(printf '%s\n' "${!menu[@]}" | sort | "${launcher[@]}")"
swaymsg -q "exec ${menu[${selection}]}"



#if [[ $? -eq 0 && ! -z ${selection} ]]; then
#  if [[ "${enable_confirmation}" = true && \
#        ${menu_confirm} =~ (^|[[:space:]])"${selection}"($|[[:space:]]) ]]; then
#    ask_confirmation
#  else
#    swaymsg -q "exec ${menu[${selection}]}"
#  fi
#fi
